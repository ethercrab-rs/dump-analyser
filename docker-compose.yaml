version: "3.5"

x-redash-service: &redash-service
  image: redash/redash:10.1.0.b50633
  depends_on:
    - postgres
    - redis
  restart: always
  environment: &redash-service-env
    REDASH_WEB_WORKERS: 4
    REDASH_COOKIE_SECRET: ethercrab
    REDASH_REDIS_URL: redis://redis:6379/0
    REDASH_DATABASE_URL: postgresql://ethercrab:ethercrab@postgres/redash

services:
  # NOTE: Rubbish for non-time-series, but left in for posterity
  grafana:
    container_name: grafana
    image: "grafana/grafana-oss:9.5.12"
    restart: unless-stopped
    volumes:
      # NOTE: This won't work unless you do `sudo chown 472:472 data/grafana`
      - "./data/grafana:/var/lib/grafana"
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_USER=ethercrab
      - GF_SECURITY_ADMIN_PASSWORD=ethercrab
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SECURITY_ALLOW_EMBEDDING=true

  postgres:
    container_name: postgres
    image: postgres:16.0-alpine
    restart: always
    volumes:
      - "./data/postgres/data:/var/lib/postgresql/data/pgdata"
      # Data dir must be empty for these scripts to run
      - "./data/pg-init:/docker-entrypoint-initdb.d"
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ethercrab
      POSTGRES_PASSWORD: ethercrab
      POSTGRES_DB: ethercrab
      PGDATA: /var/lib/postgresql/data/pgdata
      # INSECURE. LOCAL USE ONLY. Added because Apache Zeppelin is rubbish and doesn't understand
      # newer auth methods.
      POSTGRES_HOST_AUTH_METHOD: md5
      POSTGRES_INITDB_ARGS: --auth-host=md5
    shm_size: 1g

  adminer:
    container_name: adminer
    image: adminer
    restart: always
    links:
      - "postgres:postgres"
    ports:
      - 8080:8080
    environment:
      ADMINER_DEFAULT_SERVER: postgres

  zeppelin:
    container_name: zeppelin
    build: ./zeppelin
    links:
      - "postgres:postgres"
    ports:
      - 8081:8080
    environment:
      ZEPPELIN_LOG_DIR: /logs
      ZEPPELIN_NOTEBOOK_DIR: /notebook
      ZEPPELIN_INTERPRETER_OUTPUT_LIMIT: 2048000
    volumes:
      - "./data/zeppelin/logs:/logs"
      - "./data/zeppelin/notebook:/notebook"

  redash:
    # NOTE: Run `dc run --rm server create_db` to create tables!
    <<: *redash-service
    command: server
    container_name: redash
    depends_on:
      - scheduler
      - scheduled_worker
      - adhoc_worker
      - redis
      - postgres
    ports:
      - "5000:5000"
    environment:
      <<: *redash-service-env
      REDASH_WEB_WORKERS: 4
  scheduler:
    <<: *redash-service
    command: scheduler
    environment:
      <<: *redash-service-env
      QUEUES: "celery"
      WORKERS_COUNT: 1
  scheduled_worker:
    <<: *redash-service
    command: worker
    environment:
      <<: *redash-service-env
      QUEUES: "scheduled_queries,schemas"
      WORKERS_COUNT: 1
  adhoc_worker:
    <<: *redash-service
    command: worker
    environment:
      <<: *redash-service-env
      QUEUES: "queries"
      WORKERS_COUNT: 2
  redis:
    container_name: redis
    image: redis:7.0-alpine
    restart: always
    ports:
      - "6379:6379"

  jupyter:
    container_name: jupyter
    build: ./jupyter-rust
    links:
      - "postgres:postgres"
    ports:
      - 8888:8888
    volumes:
      - ./data/notebooks:/opt/notebooks
# Kibana is WIP at time of writing. I can't get the postgres connector to work :(
#
#   elasticsearch:
#     container_name: elasticsearch
#     image: elasticsearch:8.10.2
#     networks:
#       - elastic
#     ports:
#       - 9200:9200
#       - 9300:9300
#     environment:
#       discovery.type: single-node
#       xpack.security.enabled: false

#   kibana:
#     container_name: kibana
#     image: kibana:8.10.2
#     links:
#       - "postgres:postgres"
#       - "elasticsearch:elasticsearch"
#     ports:
#       - 5601:5601
#     networks:
#       - elastic
#     depends_on:
#       - elasticsearch
#     environment:
#       SERVER_NAME: ethercrab.house
#       ELASTICSEARCH_URL: http://elasticsearch:9200
#       ELASTIC_PASSWORD: ethercrab
#       ELASTIC_USER: ethercrab
#     # volumes:
#     #   # This might need a `touch kibana.yml` and a `chown 1000:1000 kibana.yml`.
#     #   - ./data/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml

# networks:
#   elastic:
